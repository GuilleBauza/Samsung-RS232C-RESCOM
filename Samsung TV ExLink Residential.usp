/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: MDT Technologies
System Name:
System Number:
Programmer: Guillermo Hernandez
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Samsung EX-Link Residential"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "24" // TV/Video Projector
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   Samsung displays module for rs232 Ex link (Residential).
	/x08/x22...
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT PowerOn, PowerOff,_SKIP_, HDMI1_Input,_SKIP_, Volume_Up, Volume_Down, Volume_Mute_Toggle, _SKIP_;
// ANALOG_INPUT 
STRING_INPUT From_Device$[32];
// BUFFER_INPUT 

 DIGITAL_OUTPUT PowerOn_fb, PowerOff_fb; 
// ANALOG_OUTPUT 
STRING_OUTPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,To_Device$; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function PollPower()
{
	To_Device$ = "\x08\x22\x00\x00\x00\x00\xD6";
	Wait(500, poll)
	{
		PollPower();		
	}
}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH PowerOn
{
	PauseWait(poll);
   	To_Device$ = "\x08\x22\x00\x00\x00\x02\xD4";
	Wait(100)
	{
		ResumeWait(poll);		
	}
}

PUSH PowerOff
{
	PauseWait(poll);
   To_Device$ = "\x08\x22\x00\x00\x00\x01\xD5";
   	Wait(100)
	{
		ResumeWait(poll);		
	}
}

PUSH HDMI1_Input
{
   PauseWait(poll);
   To_Device$ = "\x08\x22\x0a\x00\x05\x00\xC7";
    	Wait(100)
	{
		ResumeWait(poll);		
	}
}

PUSH Volume_Up
{
     PauseWait(poll);
   To_Device$ = "\x08\x22\x01\x00\x01\x00\xD4";
     	Wait(100)
	{
		ResumeWait(poll);		
	}
}

PUSH Volume_Down
{
    PauseWait(poll);
   To_Device$ = "\x08\x22\x01\x00\x02\x00\xD3";
   	Wait(100)
	{
		ResumeWait(poll);		
	}
}

PUSH Volume_Mute_Toggle
{
      PauseWait(poll);
   To_Device$ = "\x08\x22\x02\x00\x00\x00\xD4";
    	Wait(100)
	{
		ResumeWait(poll);		
	}
}
/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE From_Device$
{
 	if(From_Device$ = "ON")
	{
		PowerOff_fb = 0;
		PowerOn_fb = 1;
	}
	else if(From_Device$ = "OFF")
	{
		PowerOn_fb = 0;
		PowerOff_fb = 1;
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

